function test_proj
%--------------------------------------------------------------------------
% Projection onto the stiefel manifold with non-negative constraints
%
%                  min     \|C-X\|_F^2
%                  s.t.    X'X=I, X>=0
%
% C are generated by the following code, here B is a random feasible point,
% Xtrue is the ground truth
%
% X = (B>0).*(1+rand(n,k)); Xtrue = X./sqrt(sum(X.*X));
% d = 0.5+3*rand(k,1); L = xi*((d*d').^ 0.5).*rand(k,k);
% L(sub2ind([k,k],1:k,1:k)) = d; C = Xtrue*L;
%
% parameter xi controls the magnitude of noise level. Larger xi makes it
% more difficult to find the ground truth.
%
%--------------------------------------------------------------------------
% Reference:
% B. Jiang, X. Meng, Z. Wen and X. Chen
% An Exact Penalty Approach For Optimization With Nonnegative Orthogonality
% Constraints
%
% Author: X. Meng, B. Jiang
% Version 1.0 .... 2021/1

%--------------------------------------------------------------------------

% choose a list of size
size_list = [2000 10; 2000 50; 2000 100];

% choose a list of noise (xi<1)
xilist = [0.9 0.95];

% number of tests for each case
ntest = 30;

% whether record iter. info
record = 1;

% whether print information for each single test
verbose = 0;

% save iter. info.
filesrc = strcat(pwd,filesep,'results');
if ~exist(filesrc, 'dir');     mkdir(filesrc);   end
filepath = strcat(filesrc, filesep, 'proj');
if ~exist(filepath, 'dir');    mkdir(filepath);  end

if(~verbose)
    fprintf(['(   n,   m,     xi) succ/ntest avetime |X-Xtrue| '...
        'relafgap   feasi  nproj\n']);
end

for i=1:length(xilist)
    xi = xilist(i);
    for k=1:size(size_list,1)
        n = size_list(k,1);
        m = size_list(k,2);
        
        if(~verbose); fprintf('(%4d,%4d,%2.1e)',n,m,xi);end
        
        % record the results
        success = 0;     fail = 0;
        relagap_all = 0; feasi_all = 0;
        time_all = 0;    distX_Xtrue_all = 0;
        nproj_all = 0;   relagap_fail = 0;
        
        % fix seed
        seed = 2021;
        RandStream.setGlobalStream(RandStream('mt19937ar','seed',seed));
        
        for j=1:ntest
            
            % construct Xtrue and C
            while(true)
                x_value = 1+rand(n,1);
                x_label = randi(m,n,1);
                x = zeros(n,m);
                for ii=1:n
                    x(ii,x_label(ii)) = x_value(ii);
                end
                if(min(sum(x))==0)
                    continue;
                end
                x_norm = sqrt(sum(x.*x));
                X_true = x./x_norm;
                break;
            end
            diag_rand = 0.5+(rand(1,m))*3;
            L = xi*rand(m,m).*((diag_rand'*diag_rand).^0.5);
            L(sub2ind([m,m],1:m,1:m)) = diag_rand;
            C = X_true*L;
            
            % generate initial point by rounding C
            [X0, can_round] = round_st(C);
            if(~can_round); X0 = eye(n,m); end
            
            % set parameters for Ep4orth_proj
            clear opts
            opts.record = 0;
            opts.tol = 1;
            opts.maxoit = 3e2;
            opts.maxoit = 1e3;
            opts.omega2 = 5;
            opts.maxBB = 1;
            if(record)
                recordname = strcat(filepath,filesep,'Ep4orth_proj',...
                    'n',num2str(n),'m',num2str(m),'xi',num2str(xi),'.txt');
                opts.recordFile = recordname;
            end
            
            % run Ep4orth_proj
            [X, out] = Ep4orth_proj(C, X0, opts);
            
            % record results, check whether the solution is correct
            nproj_all = nproj_all + out.nproj;
            time_all = time_all + out.time ;
            fXtrue = norm(X_true - C,'fro');
            fX = norm(X - C,'fro');
            relagap  = abs(fX/fXtrue - 1);
            relagap_all = relagap_all + relagap;
            distX_Xtrue  = norm(X - X_true, 'fro');
            distX_Xtrue_all = distX_Xtrue_all + distX_Xtrue ;
            feasi  = norm(X'*X-eye(m),'fro');
            feasi_all = feasi_all + feasi ;
            if(distX_Xtrue  < 1e-8)
                success = success+1;
                tag = 'success';
            else
                fail = fail + 1;
                tag = 'fail';
                relagap_fail = relagap_fail + relagap;
            end
            
            % print results for each test
            if(verbose)
                fprintf(['irun: %4d/%4d, %10s, time: %4.2e, |X-Xtrue|'...
                    ': %2.1e, relafgap: %2.1e, feas: %2.1e, nproj:',...
                    ' %2d\n'],j,ntest,tag,out.time,distX_Xtrue,...
                    relagap,feasi,out.nproj);
            end
        end
        
        if(verbose)
            fprintf('summary: n: %4d, k: %4d, xi: %4.2f\n', n, m, xi);
            fprintf(['ntest: %4d, suc: %4d, fail: %4d, avetime: %4.2e,'...
                '|X-Xtrue|: %2.1e, relafgap_fail: %2.1e, feas: %2.1e,'...
                'nproj: %4.1f\n'],ntest,success,fail,time_all/ntest,...
                distX_Xtrue_all/ntest,relagap_all/ntest,feasi_all/ntest,...
                nproj_all/ntest);
            fprintf(['---------------------------------------------',...
                '----------------------------------------------------\n']);
        else
            fprintf(' %4d/%4d %4.2e   %2.1e  %2.1e %2.1e  %4.1f\n',...
                success,ntest,time_all/ntest,distX_Xtrue_all/ntest,...
                relagap_all/ntest,feasi_all/ntest, nproj_all/ntest);
        end
    end
end